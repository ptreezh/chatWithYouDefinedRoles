#!/usr/bin/env node

/**
 * ‰∏¥Êó∂Êï∞ÊçÆÂ∫ìËøûÊé•Ê®°Âùó
 * Áî®‰∫éËß£ÂÜ≥PrismaÂÆ¢Êà∑Á´ØÈóÆÈ¢ò
 */

const { Database } = require('sqlite3').verbose();
const path = require('path');

// ÂàõÂª∫Êï∞ÊçÆÂ∫ìËøûÊé•
const dbPath = path.join(__dirname, '..', 'db', 'custom.db');
const db = new Database(dbPath);

// ÁÆÄÂçïÁöÑÊü•ËØ¢ÂáΩÊï∞
function query(sql, params = []) {
  return new Promise((resolve, reject) => {
    db.all(sql, params, (err, rows) => {
      if (err) {
        reject(err);
      } else {
        resolve(rows);
      }
    });
  });
}

// ÁÆÄÂçïÁöÑÊâßË°åÂáΩÊï∞
function run(sql, params = []) {
  return new Promise((resolve, reject) => {
    db.run(sql, params, function(err) {
      if (err) {
        reject(err);
      } else {
        resolve({ id: this.lastID, changes: this.changes });
      }
    });
  });
}

// ÂàõÂª∫ÂøÖË¶ÅÁöÑË°®ÁªìÊûÑ
async function initDatabase() {
  console.log('üóÑÔ∏è ÂàùÂßãÂåñÊï∞ÊçÆÂ∫ì...');
  
  // ÂàõÂª∫Áî®Êà∑Ë°®
  await run(`
    CREATE TABLE IF NOT EXISTS users (
      id TEXT PRIMARY KEY,
      email TEXT UNIQUE NOT NULL,
      name TEXT,
      password_hash TEXT,
      avatar TEXT,
      status TEXT DEFAULT 'PENDING',
      role TEXT DEFAULT 'USER',
      email_verified INTEGER DEFAULT 0,
      last_login_at DATETIME,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `);

  // ÂàõÂª∫ËßíËâ≤Ë°®
  await run(`
    CREATE TABLE IF NOT EXISTS characters (
      id TEXT PRIMARY KEY,
      name TEXT NOT NULL,
      systemPrompt TEXT NOT NULL,
      avatar TEXT,
      modelConfig TEXT,
      participationLevel REAL DEFAULT 0.7,
      interestThreshold REAL DEFAULT 0.5,
      memoryBankPath TEXT,
      category TEXT DEFAULT 'custom',
      theme TEXT,
      filePath TEXT,
      isActive INTEGER DEFAULT 1,
      userId TEXT NOT NULL,
      createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
      updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (userId) REFERENCES users(id) ON DELETE CASCADE
    )
  `);

  // ÂàõÂª∫ËÅäÂ§©ÂÆ§Ë°®
  await run(`
    CREATE TABLE IF NOT EXISTS chat_rooms (
      id TEXT PRIMARY KEY,
      name TEXT NOT NULL,
      theme TEXT,
      isActive INTEGER DEFAULT 1,
      userId TEXT NOT NULL,
      createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
      updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (userId) REFERENCES users(id) ON DELETE CASCADE
    )
  `);

  // ÂàõÂª∫Ê∂àÊÅØË°®
  await run(`
    CREATE TABLE IF NOT EXISTS messages (
      id TEXT PRIMARY KEY,
      content TEXT NOT NULL,
      senderType TEXT NOT NULL,
      senderId TEXT,
      chatRoomId TEXT NOT NULL,
      contextSummary TEXT,
      interestScore REAL,
      participationReason TEXT,
      memorySnapshot TEXT,
      createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
      updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (chatRoomId) REFERENCES chat_rooms(id) ON DELETE CASCADE,
      FOREIGN KEY (senderId) REFERENCES characters(id) ON DELETE SET NULL
    )
  `);

  console.log('‚úÖ Êï∞ÊçÆÂ∫ìÂàùÂßãÂåñÂÆåÊàê');
}

// Áî®Êà∑Áõ∏ÂÖ≥Êìç‰Ωú
const userOperations = {
  async create(userData) {
    const id = 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    await run(`
      INSERT INTO users (id, email, name, password_hash, status, role, email_verified, created_at, updated_at)
      VALUES (?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
    `, [id, userData.email, userData.name || '', userData.password_hash || '', userData.status || 'PENDING', userData.role || 'USER', userData.email_verified ? 1 : 0]);
    return { id, ...userData };
  },

  async findByEmail(email) {
    const users = await query('SELECT * FROM users WHERE email = ?', [email]);
    return users[0] || null;
  },

  async findById(id) {
    const users = await query('SELECT * FROM users WHERE id = ?', [id]);
    return users[0] || null;
  },

  async update(id, updates) {
    const fields = Object.keys(updates).filter(key => updates[key] !== undefined);
    if (fields.length === 0) return null;
    
    const setClause = fields.map(field => `${field} = ?`).join(', ');
    const values = fields.map(field => updates[field]);
    values.push(id);
    
    await run(`UPDATE users SET ${setClause}, updated_at = CURRENT_TIMESTAMP WHERE id = ?`, values);
    return this.findById(id);
  },

  async delete(id) {
    await run('DELETE FROM users WHERE id = ?', [id]);
    return true;
  }
};

// ËßíËâ≤Áõ∏ÂÖ≥Êìç‰Ωú
const characterOperations = {
  async create(characterData) {
    const id = 'char_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    await run(`
      INSERT INTO characters (id, name, systemPrompt, avatar, modelConfig, participationLevel, interestThreshold, memoryBankPath, category, theme, filePath, isActive, userId, createdAt, updatedAt)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
    `, [id, characterData.name, characterData.systemPrompt, characterData.avatar, characterData.modelConfig, characterData.participationLevel || 0.7, characterData.interestThreshold || 0.5, characterData.memoryBankPath, characterData.category || 'custom', characterData.theme, characterData.filePath, characterData.isActive ? 1 : 0, characterData.userId]);
    return { id, ...characterData };
  },

  async findByUserId(userId) {
    return await query('SELECT * FROM characters WHERE userId = ? AND isActive = 1', [userId]);
  },

  async findByIdAndUserId(id, userId) {
    const characters = await query('SELECT * FROM characters WHERE id = ? AND userId = ? AND isActive = 1', [id, userId]);
    return characters[0] || null;
  }
};

// ËÅäÂ§©ÂÆ§Áõ∏ÂÖ≥Êìç‰Ωú
const chatroomOperations = {
  async create(roomData) {
    const id = 'room_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    await run(`
      INSERT INTO chat_rooms (id, name, theme, isActive, userId, createdAt, updatedAt)
      VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
    `, [id, roomData.name, roomData.theme, roomData.isActive ? 1 : 1, roomData.userId]);
    return { id, ...roomData };
  },

  async findByUserId(userId) {
    return await query('SELECT * FROM chat_rooms WHERE userId = ? AND isActive = 1 ORDER BY createdAt DESC', [userId]);
  },

  async findByIdAndUserId(id, userId) {
    const rooms = await query('SELECT * FROM chat_rooms WHERE id = ? AND userId = ? AND isActive = 1', [id, userId]);
    return rooms[0] || null;
  }
};

module.exports = {
  initDatabase,
  query,
  run,
  user: userOperations,
  character: characterOperations,
  chatroom: chatroomOperations
};